@mixin media($type) {

  @if $type == mobile {

      @media only screen and (max-width:em(699)) {
          @content;
      }

  }
  @if $type == bigMobile {

      @media only screen and (min-width:em(600))  {
          @content;
      }


  }


  @if $type == beforeDesktop {

      @media only screen and (max-width:em(1200))  {
          @content;
      }


  }

  @if $type == tablet {

      @media only screen and (min-width:em(700))  {
          @content;
      }


  }
  @if $type == betweenMobileandTablet {
      @media only screen and (min-width:em(700)) and (max-width: em(800))  {
          @content;
      }
  }
  @if $type == tabletOnly {

      @media only screen and (min-width:em(700)) and (max-width: em(1140))  {
          @content;
      }


  }



  @if $type == tablet_horizontal {

      @media only screen and (min-height:em(600)) and (min-width:em(900))  {
          @content;
      }


  }

  @if $type == tallscreen {

      @media only screen and (min-height:em(700)) and (min-width:em(1000)) {
          @content;
      }

  }

  @if $type == shortscreen {

      @media only screen and (max-height:em(700)) and (min-width:em(1000)) {
          @content;
      }

  }

  @if $type == notDesktop {

      @media only screen and (max-width:em(1140)) {
          @content;
      }

  }
  
  @if $type == desktop {

      @media only screen and (min-width:em(1140)) {
          @content;
      }

  }

   @if $type == largescreen {

      @media only screen and (min-width:em(1400)) {
          @content;
      }

  }



  
   @if $type == retina {
      @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { 
          @content;
      }
      

  }
  

}



@mixin ab-center($width, $height) {
    position: absolute;
    left: 50%;
    top: 50%;
    height: $height;
    width: $width;
    margin-left: - $width / 2;
    margin-top: - $height / 2;
}

@mixin h-center($width) {
    position: absolute;
    left: 50%;
    width: $width;
    margin-left: - $width / 2;

}


@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}


@mixin ab-h-center($offset) {
  position: absolute;
  left: 50%;
  margin-left: $offset;
}


$public_path: "./";
 
@mixin svg_bg($name) {
  background-image: url('#{$name}.png');
  background-image: none, url('#{$name}.svg');
  background-size: 100% auto;
  background-repeat: no-repeat;
}

/*
 * Mixin for micro clearfix
 * @include microclearfix;
*/
@mixin cf{
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
	
}


@mixin rem($property, $px-values) {
// Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
// Print the first line in pixel values
  #{$property}: $px-values;
// If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
  // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
    // If the value is zero or a string or a color, return unchanged input
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
  // Return the property and its list of converted values
    #{$property}: $rem-values; } }
